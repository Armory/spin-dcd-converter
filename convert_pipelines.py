import argparse
import copy
import json
import os
import sys
import pprint

import requests
import yaml
import yaml.dumper

from collections import OrderedDict


class UnsortableList(list):
  def sort(self, *args, **kwargs):
    pass


class UnsortableOrderedDict(OrderedDict):
  """
  Because PyYAML sorts things. Guh.
  """
  def items(self, *args, **kwargs):
    return UnsortableList(OrderedDict.items(self, *args, **kwargs))


def convert(pipeline_config):
  template = UnsortableOrderedDict([
    ('schema', '1'),
    ('id', 'generatedTemplate'),
    ('metadata', UnsortableOrderedDict([
      ('name', pipeline_config['name']),
      ('description', pipeline_config['description'] if 'description' in pipeline_config else ''),
      ('owner', pipeline_config['lastModifiedBy'])
    ])),
    ('protect', False),
    ('configuration', UnsortableOrderedDict([
      ('concurrentExecutions', UnsortableOrderedDict([
        ('parallel', pipeline_config['parallel']),
        ('limitConcurrent', pipeline_config['limitConcurrent'])
      ])),
      ('trigger', map(lambda t: t.update(name=t['id']), pipeline_config['triggers'])),
      ('parameters', pipeline_config['parameterConfig']),
      ('notifications', _convert_notifications(pipeline_config['notifications']))
    ])),
    ('variables', []),
    ('stages', _convert_stages(pipeline_config['stages']))
  ])
  return template


def _convert_stages(stages):
  ret = []
  for s in stages:
    stage = UnsortableOrderedDict([
      ('id', _get_stage_id(s['type'], s['refId'])),
      ('type', s['type']),
      ('name', s['name']),
      ('config', _scrub_stage_config(s))
    ])

    if 'requisiteStageRefIds' in stage and len(stage['requisiteStageRefIds']) > 0:
      stage['dependsOn'] = [_get_ref_stage_id(s) for s in stage['requisiteStageRefIds']]
    ret.append(stage)

  return ret


def _get_ref_stage_id(stages, ref_id):
  stage = [s for s in stages if s['refId'] == ref_id][0]
  return _get_stage_id(stage['type'], stage['refId'])


def _get_stage_id(stage_type, stage_ref_id):
  return ''.join([stage_type, stage_ref_id])


def _scrub_stage_config(stage):
  s = copy.deepcopy(stage)
  del s['type']
  del s['refId']
  del s['requisiteStageRefIds']
  return s


def _convert_notifications(notifications):
  i = 0
  ret = []
  for n in notifications:
    n['name'] = '{}{}'.format(n['type'], i)
    ret.append(n)
  return ret


def render(pipeline_template):
  yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict, Dumper=yaml.dumper.SafeDumper)
  return '''\
# GENERATED BY spin-dcd-converter
#
# The output generated by this tool should be used as a base for further
# modifications. It does not make assumptions as to what things can be made into
# variables, modules or Jinja templates. This is your responsibility as the
# owner of the template.
#
# Some recommendations to massage the initial output:
#
# * Rename the pipeline stage IDs, notification names and trigger names to be 
#   more meaningful. Enumerated stage IDs is ultimately a detriment for 
#   long-term maintainability.
{template}
'''.format(template=yaml.safe_dump(pipeline_template, default_flow_style=False))

def get_pipeline_config(api_host, app, pipeline_config_id):
  # TODO rz - I'm not proud of this, but I want to move on
  session_cookie = os.getenv('API_SESSION')
  cookies = {} if session_cookie is None else {'SESSION': session_cookie}

  r = requests.get('{host}/applications/{app}/pipelineConfigs/{config_id}'.format(
    host=api_host, 
    app=app,
    config_id=pipeline_config_id
  ), cookies=cookies)

  if r.status_code != 200:
    print('failed getting pipeline config: ' + r.status_code)
    return False
  
  return r.json()


def parser():
  p = argparse.ArgumentParser()
  p.add_argument('app')
  p.add_argument('pipelineConfigId')
  return p


if __name__ == '__main__':
  api_host = os.getenv('API_HOST')
  if api_host is None:
    print('API_HOST must be set to your Spinnaker API')
    sys.exit(1)
  if api_host[-1:] == '/':
    api_host = api_host[:-1]

  args = parser().parse_args()

  pipeline_config = get_pipeline_config(api_host, args.app, args.pipelineConfigId)
  template = convert(pipeline_config)
  print(render(template))
